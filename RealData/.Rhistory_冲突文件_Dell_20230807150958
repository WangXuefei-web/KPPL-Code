}
sample_mean2 <- data.frame(trails=1:20000)%>%mutate(X = map(~sample_Xs(a=3, b=5, n=900)))
trials=20
sample_mean2 <- rep(0,trails)
for (i in 1:trails){
sample_mean2[i] = mean(sample_Xs(a=3, b=5, n=900))
}
trials=20
sample_mean2 <- rep(0,trials)
for (i in 1:trials){
sample_mean2[i] = mean(sample_Xs(a=3, b=5, n=900))
}
range(c(0,2),0.1)
range(c(0,2),0.5)
seq(c(0,2),0.5)
seq(0,2,0.5)
pnorm(0,5)
pnorm(0)
pnorm(0.5)
dot <- data.frame(x=seq(mu-3*sigma, mu+3*sigma, 0.1*sigma))%>%mutate(f=pnorm(xi, mean=mu, sd=sigma))
mu <- expectation
sigma <- sqrt(sample_variance/n)
sample_variance
n
n <- 900
mu <- expectation
sigma <- sqrt(sample_variance/n)
data <- data.frame(x=seq(mu-3*sigma, mu+3*sigma, 0.1*sigma))%>%mutate(f=pnorm(xi, mean=mu, sd=sigma))
data <- data.frame(x=seq(mu-3*sigma, mu+3*sigma, 0.1*sigma))%>%mutate(f=pnorm(x, mean=mu, sd=sigma))
View(data)
#(10)
library(ggplot2)
ggplot(data = data,aes(x=x,y=f))+
geom_point()
data <- data.frame(x=seq(mu-3*sigma, mu+3*sigma, 0.1*sigma))%>%mutate(f=dnorm(x, mean=mu, sd=sigma))
p0 <- 2*a*b/((a+b)*(a+b-1))
data <- data.frame(x=seq(mu-3*sigma, mu+3*sigma, 0.1*sigma))%>%mutate(f=dnorm(x, mean=mu, sd=sigma))
ggplot(data = data,aes(x=x,y=f))+
geom_point()
ggplot(data = data)+
geom_point(mapping=aes(x=x,y=f),colour="firebrick")
ggplot(data = data)+
geom_point(mapping=aes(x=x,y=f),colour="firebrick")+
geom_density(sample_mean2)
ggplot(data = data)+
geom_point(mapping=aes(x=x,y=f),colour="firebrick")+
geom_density(sample_mean2)
ggplot(data = sample_mean2)+geom_density()
ggplot(data = sample_mean2)+
geom_density()
ggplot(data = data.frame(sample_mean2=sample_mean2)+
geom_density()
ggplot(data = data.frame(sample_mean2=sample_mean2,ase=x=sample_mean2)+
ggplot(data = data.frame(sample_mean2=sample_mean2,ase=x=sample_mean2))+
geom_density()
ggplot(data = data.frame(sample_mean2=sample_mean2),ase=x=sample_mean2)+
geom_density()
ggplot(data = data.frame(sample_mean2=sample_mean2),ase(x=sample_mean2))+
geom_density()
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density()
View(data)
trials=20000
sample_mean2 <- rep(0,trials)
for (i in 1:trials){
sample_mean2[i] = mean(sample_Xs(a=3, b=5, n=900))
}
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density()
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density(colour="oliver")
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density(colour="olive")
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density(colour="olivegreen")
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density(colour="darkolivegreen")
ggplot(data = data)+
geom_point(mapping=aes(x=x,y=f),colour="firebrick")+
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density(colour="darkolivegreen")
ggplot(data = data)+
geom_point(mapping=aes(x=x,y=f),colour="firebrick")
ggplot(data = data.frame(sample_mean2=sample_mean2),aes(x=sample_mean2))+
geom_density(colour="darkolivegreen")
plot(data$x,data$f)
plot(data$x,data$f,xlab="x",ylab="density",col="firebrick",pch=19)
density(sample_mean2)
dan = density(sample_mean2)
View(dan)
den = density(sample_mean2)
library(ggplot2)
n <- 900
mu <- expectation
sigma <- sqrt(sample_variance/n)
data <- data.frame(x=seq(mu-3*sigma, mu+3*sigma, 0.1*sigma))%>%mutate(f=dnorm(x, mean=mu, sd=sigma))
den = density(sample_mean2)
plot(data$x,data$f,xlab="x",ylab="density",col="firebrick",pch=19)
lines(den$x, den$y,col="darkolivegreen")
lines(den$x, den$y,col="darkolivegreen",lty=3)
legend("topright",col=c("firebrick","darkolivegreen"),pch=c(19,),lty=c(,3))
legend("topright",col=c("firebrick","darkolivegreen"),pch=c(19,Na),lty=c(,3))
legend("topright",legend=c("Theoretical density", "Sample density"),col=c("firebrick","darkolivegreen"),pch=c(19,Na),lty=c(,3))
legend("topright",legend=c("Theoretical density", "Sample density"),col=c("firebrick","darkolivegreen"),pch=c(19,NA),lty=c(NA,3))
data <- data.frame(x=seq(mu-3*sigma, mu+3*sigma, 0.1*sigma))%>%mutate(f=dnorm(x, mean=mu, sd=sigma))
den = density(sample_mean2)
plot(data$x,data$f,xlab="x",ylab="density",col="firebrick",pch=19)
lines(den$x, den$y,col="darkolivegreen",lty=1)
legend("topright",legend=c("Theoretical density", "Sample density"),col=c("firebrick","darkolivegreen"),pch=c(19,NA),lty=c(NA,1))
print('\n'.join([''.join([('Love'[(x-y) % len('Love')]                            if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0else' ')               for x in range(-30, 30)])                  for y in range(30, -30, -1)]))
print('\n'.join([''.join([('Love'[(x-y) % len('Love')]
if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0else' ')
for x in range(-30, 30)])
for y in range(30, -30, -1)]))
library(readcsv)
data <- read.csv("F:/Di/supermarket_data_EMATM0061.csv")
View(data)
#(5)
sample_mean <- mean(data)
#(5)
sample_mean <- mean(data$TimeLength)
lambda_mle <- (mean(data$TimeLength)-b)^(-1)
#(5)
b <- 300
lambda_mle <- (mean(data$TimeLength)-b)^(-1)
lambda <- 2
#(7)
b <- 0.01
n=500
rexp(n, rate = lambda)+b
n=10
rexp(n, rate = lambda)
a=rexp(n, rate = lambda)
a
a+b
library(tidyverse)
n=50
sample <- rexp(n, rate = lambda)+b
lambda_hat <- rep(0,trail_max)
for (trail in 1:trail_max){
sample <- generate_sample(lambda,b,n)
lambda_hat[i] <- lambda_mle(mean(sample),b)
}
mse <- mean((lambda_hat-lambda)^2)
trail_max <- 100
lambda_hat <- rep(0,trail_max)
for (trail in 1:trail_max){
sample <- generate_sample(lambda,b,n)
lambda_hat[i] <- lambda_mle(mean(sample),b)
}
mse <- mean((lambda_hat-lambda)^2)
for (trail in 1:trail_max){
sample <- generate_sample(lambda,b,n)
lambda_hat[i] <- lambda_mle(mean(sample),b)
}
generate_sample <- function(lambda,b,n){
sample <- rexp(n, rate = lambda)+b
return(sample)
}
for (trail in 1:trail_max){
sample <- generate_sample(lambda,b,n)
lambda_hat[i] <- lambda_mle(mean(sample),b)
}
lambda_hat <- rep(0,trail_max)
for (trail in 1:trail_max){
sample <- generate_sample(lambda,b,n)
lambda_hat[trail] <- lambda_mle(mean(sample),b)
}
lambda_mle <- function(sample_mean,b){
(sample_mea-b)^(-1)
}
lambda_q5 <- lambda_mle(mean(data$TimeLength),b)
b <- 300
lambda_mle <- function(sample_mean,b){
(sample_mean-b)^(-1)
}
lambda_q5 <- lambda_mle(mean(data$TimeLength),b)
b <- 0.01
lambda <- 2
n_seq <- seq(100,5000,10)
trail_max <- 100
generate_sample <- function(lambda,b,n){
sample <- rexp(n, rate = lambda)+b
return(sample)
}
lambda_hat <- rep(0,trail_max)
for (trail in 1:trail_max){
sample <- generate_sample(lambda,b,n)
lambda_hat[trail] <- lambda_mle(mean(sample),b)
}
mse <- mean((lambda_hat-lambda)^2)
compute_lambda_mse <- function(trail_max,b,n){
lambda_hat <- rep(0,trail_max)
for (trail in 1:trail_max){
sample <- generate_sample(lambda,b,n)
lambda_hat[trail] <- lambda_mle(mean(sample),b)
}
mse <- mean((lambda_hat-lambda)^2)
return(mse)
}
df <- data.frame(n <- n_seq) %>% mutate(mse=map_dbl(.x=n,~compute_lambda_mse(trail_max,b,.x)))
library(ggplot2)
ggplot(data=df, aes(x=n, y=mse)) +
geom_line()+
geom_point()
ggplot(data=df, aes(x=n, y=mse)) +
geom_line()
n=90+120+150
k=3
fun <- function(k,n){}
fun <- function(k,n){return(n*log(k+1)+k*(k+1)/2)}
fun(n,k)
n
log(k+1)
k*(k+1)/2
fun(n,k)
n*log(k+1)+k*(k+1)/2
(2*log(n)+log(k))/(n*log(k+1))
install.packages(rTensor)
install.packages("rTensor")
install.packages("plotly")
devtools::install_github("ChenyuzZZ73/rMultiNet")
bulid()
library(rMultiNet)
install.packages("devtools")
devtools::install_github("ChenyuzZZ73/rMultiNet")
update
install.packages('installr')
install.packages('Rtools')
library(installr)
updateR()
updateR()
library(installr)
updateR()
updateR()
library(installr)
updateR()
library(installr)
updateR()
devtools::install_github("ChenyuzZZ73/rMultiNet")
bulid()
devtools::install_github("ChenyuzZZ73/rMultiNet")
update.packages()
devtools::install_github("ChenyuzZZ73/rMultiNet")
library(Rtools)
install.packages('Rtools')
install.packages('Rtools 4.2 ')
devtools::install_github("ChenyuzZZ73/rMultiNet")
bulid()
install.packages('build')
bulid()
library(Rtools)
library(Rtools42)
library(rMultiNet)
log(100)
summary(m22)
library (MASS)
library(gamlss)
library(gamlss.dist)
library(ggplot2)
set.seed(123)
### 1. Load data and change the formate ###
mydata <- read.delim("E:/water/3.GAMLSS/meanvalue_date.txt")
mydata$date <- as.Date(mydata$date)
n <- length(mydata$date)
mydata['num'] <- c(1:n)
m22 <- gamlss(value ~ poly(date, 2), sigma.fo = ~poly(date, 2), data = mydata, control = con)
con <- gamlss.control(trace = FALSE)
m22 <- gamlss(value ~ poly(date, 2), sigma.fo = ~poly(date, 2), data = mydata, control = con)
summary(m22)
library (MASS)
library(gamlss)
library(gamlss.dist)
library(ggplot2)
set.seed(123)
### 1. Load data and change the formate ###
mydata <- read.delim("E:/water/3.GAMLSS/meanvalue_date.txt")
mydata$date <- as.Date(mydata$date)
n <- length(mydata$date)
mydata['num'] <- c(1:n)
library (MASS)
library(gamlss)
library(gamlss.dist)
library(ggplot2)
set.seed(123)
mydata <- read.delim("E:/water/3.GAMLSS/meanvalue_date.txt")
mydata$date <- as.Date(mydata$date)
n <- length(mydata$date)
con <- gamlss.control(trace = FALSE)
m22 <- gamlss(value ~ poly(date, 2), sigma.fo = ~poly(date, 2), data = mydata, control = con)
# 4. Determine the best model
# con <- gamlss.control(trace = FALSE)
# m22 <- gamlss(value ~ poly(date, 2), sigma.fo = ~poly(date, 2), data = mydata, control = con)
summary(m22)
# Fitted plot
plot(value ~ date, data = mydata)
#lines(mydata$date, fitted(m2), col = "blue")
lines(mydata$date, fitted(m22), col = "red")
fittedPlot(m22, x=mydata$date, line.type=TRUE)
#Warm plot
wp(m22, xvar =mydata$date, n.inter = 4, cex = 0.3, pch = 20)
m22$mu.x
mu.fv
withouttrend <- mydata$value-m22$mu.fv
plot(withouttrend ~ mydata$date)
plot(withouttrend ~ mydata$date,type="l")
# 2. Coauthor
CoauMat <- readMat('data/CoauAdjFinal.mat')
# Real data
library(R.matlab)
library(Matrix)
library(MASS)
library(tidyverse)
library(ggplot2)
library(gtools)
library(igraph)
source("../R_SBM/fun_SBM.R")
setwd("F:/BaiduSyncdisk/Try - Penalized likelihood-based method for community detection with unknown number of communities/R_RealData")
source("../R_SBM/fun_SBM.R")
source("../R_DCSBM/fun_DCSBM.R")
# 2. Coauthor
CoauMat <- readMat('data/CoauAdjFinal.mat')
CoauAdj <- as.matrix(CoauMat$A)
GCoau = graph.adjacency(CoauAdj, mode="undirected")
CoauMat$authorNames <- apply(CoauMat$authorNames,1,function(x) x[[1]][[1]])
iconv(CoauMat$authorNames,to="UTF-8")
V(GCoau)$names = iconv(CoauMat$authorNames,to="UTF-8",sub='')
vcount(GCoau) # 4383
ecount(GCoau) # 6056
Gd <- degree(GCoau)
mean(Gd) # 2.763404
sum(Gd<3) # 2869 # <= 3409 # sum(Gd>10)=107
# cores <- graph.coreness(GCoau)
V.id <- c(1:vcount(GCoau))
subV.id <- V.id[Gd>=3]
GCoau.3core <- induced_subgraph(GCoau, subV.id)
# sum(degree(GCoau.3core)==0) = 24
# induced a connected subgraph
V.id <- c(1:vcount(GCoau.3core))
subV.id <- V.id[degree(GCoau.3core)>0]
GCoau.dense <- induced_subgraph(GCoau.3core, subV.id)
subCoauAdj <- get.adjacency(GCoau.dense)
load("result/Coau.Para.hat.Rda")
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==1)]$color = 'green'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==2)]$color = 'cyan'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==3)]$color = 'salmon'
# Node size corresponding to the degree
V(GCoau.dense)$size <- 2*sqrt(degree(GCoau.dense))
vertex.label <- V(GCoau.dense)$names
vertex.label[degree(GCoau.dense)<=10] <- ""
l <- layout.graphopt(GCoau.dense)
png("result/Coau.png", height=1500,width=1500, res=144)
plot(GCoau.3core, layout=layout.kamada.kawai(GCoau.dense), vertex.size=V(GCoau.3core)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
dev.off()
Coau.Para.hat
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==1)]$color = 'green'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==2)]$color = 'cyan'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==3)]$color = 'salmon'
# Node size corresponding to the degree
V(GCoau.dense)$size <- 2*sqrt(degree(GCoau.dense))
vertex.label <- V(GCoau.dense)$names
vertex.label[degree(GCoau.dense)<=10] <- ""
#l <- layout.graphopt(GCoau.dense)
png("result/Coau.png", height=1500,width=1500, res=144)
plot(GCoau.3core, layout=layout.kamada.kawai(GCoau.dense), vertex.size=V(GCoau.3core)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
dev.off()
CoauMat <- readMat('data/CoauAdjFinal.mat')
CoauAdj <- as.matrix(CoauMat$A)
GCoau = graph.adjacency(CoauAdj, mode="undirected")
CoauMat$authorNames <- apply(CoauMat$authorNames,1,function(x) x[[1]][[1]])
iconv(CoauMat$authorNames,to="UTF-8")
V(GCoau)$names = iconv(CoauMat$authorNames,to="UTF-8",sub='')
vcount(GCoau) # 4383
ecount(GCoau) # 6056
Gd <- degree(GCoau)
mean(Gd) # 2.763404
sum(Gd<3) # 2869 # <= 3409 # sum(Gd>10)=107
# cores <- graph.coreness(GCoau)
V.id <- c(1:vcount(GCoau))
subV.id <- V.id[Gd>=3]
GCoau.3core <- induced_subgraph(GCoau, subV.id)
# sum(degree(GCoau.3core)==0) = 24
# induced a connected subgraph
V.id <- c(1:vcount(GCoau.3core))
subV.id <- V.id[degree(GCoau.3core)>0]
GCoau.dense <- induced_subgraph(GCoau.3core, subV.id)
subCoauAdj <- get.adjacency(GCoau.dense)
library(R.matlab)
library(Matrix)
library(MASS)
library(tidyverse)
library(ggplot2)
library(gtools)
library(igraph)
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==1)]$color = 'green'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==2)]$color = 'cyan'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==3)]$color = 'salmon'
plot(GCoau.3core, layout=layout.kamada.kawai(GCoau.dense), vertex.size=V(GCoau.3core)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
GCoau.dense
V(GCoau.dense)$color
plot(GCoau.dense, layout=layout.kamada.kawai(GCoau.dense), vertex.size=V(GCoau.3core)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
plot(GCoau.dense, layout=layout.kamada.kawai(GCoau.dense), vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
plot(GCoau.dense, layout=layout.graphopt(GCoau.dense), vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
plot(GTrade, layout=layout.auto(GTrade), vertex.size=V(GTrade)$size, vertex.label=V(GTrade)$names, vertex.frame.color=NA, vertex.label.cex=0.80)
plot(GCoau.dense, layout=layout.kamada.kawai(GCoau.dense), vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
e <- get.edgelist(GCoau.dense)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(GCoau.dense))
library(qgraph)
install.packages('QGRAPH')
Y
install.packages('qgraph')
library(qgraph)
e <- get.edgelist(GCoau.dense)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(GCoau.dense))
plot(g,layout=l,vertex.size=4,vertex.label=vertex.label)
plot(GCoau.dense,layout=l,vertex.size=4,vertex.label=vertex.label)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(GCoau.dense))
plot(GCoau.dense,layout=l,vertex.size=4,vertex.label=vertex.label)
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(qgraph),
area=8*(vcount(qgraph)^2),repulse.rad=(vcount(qgraph)^3.1))
l <- qgraph.layout.fruchtermanreingold(e,vcount=vcount(GCoau.dense),
area=8*(vcount(GCoau.dense)^2),repulse.rad=(vcount(GCoau.dense)^3.1))
plot(GCoau.dense,layout=l,vertex.size=4,vertex.label=vertex.label)
plot(GCoau.dense,layout=layout_with_fr,vertex.size=4,vertex.label=vertex.label)
l <- qgraph.layout.fruchtermanreingold(get.edgelist(GTrade),vcount=vcount(GTrade))
# 1. Trade
#Read Edge Data from Trade.csv file
trade = read.csv("data/Trade.csv", header = TRUE)
year = 15
trade = trade[which(trade$t==year),]; trade = trade[order(trade$exporter),];
trade = subset(trade,select=-c(number,unknown,t,exporter,importer,log_gdp_exp,log_gdp_imp,log_distance,polity_exp,polity_imp,cc))
colnames(trade) = c("from","to","weight")
# Read Attributes Data
node.attr = read.csv("data/TradeAttributes.csv", header = TRUE)
# generate Adjacency and Weight Matrices
N = max(c(trade$from,trade$to)); W = matrix(0,N,N)
for (i in 1:dim(trade)[1]){ W[trade$from[i],trade$to[i]] = trade$weight[i] }
for(i in 1:N){
for(j in i:N){
if(j>i){
W[i,j] = W[i,j] + W[j,i]
W[j,i] = W[i,j]
}
}
}
# extract maximum connected component
TradeAdj = matrix(as.numeric(W >=quantile(W,0.50)), N, N)
GTrade = graph.adjacency(TradeAdj, mode="undirected")
conn.comp = clusters(GTrade)
maximal.conn.comp = which(conn.comp$membership==1)
TradeAdj = TradeAdj[maximal.conn.comp,maximal.conn.comp]
node.attr = node.attr[maximal.conn.comp,]
diag(TradeAdj) = 0
GTrade = graph.adjacency(TradeAdj, mode="undirected")
V(GTrade)$names = as.character(node.attr$country)
#V(GTrade)$names
load("result/Trade.Para.hat.Rda")
V(GTrade)[unlist(Trade.Para.hat$e.hat==1)]$color = 'green'
V(GTrade)[unlist(Trade.Para.hat$e.hat==2)]$color = 'cyan'
V(GTrade)[unlist(Trade.Para.hat$e.hat==3)]$color = 'salmon'
V(GTrade)$size <- 2*sqrt(degree(GTrade))
l <- qgraph.layout.fruchtermanreingold(get.edgelist(GTrade),vcount=vcount(GTrade))
plot(GTrade, layout=l, vertex.size=V(GTrade)$size, vertex.label=V(GTrade)$names, vertex.frame.color=NA, vertex.label.cex=0.80)
png("result/Trade.png", height=1500,width=1500, res=144)
l <- qgraph.layout.fruchtermanreingold(get.edgelist(GTrade),vcount=vcount(GTrade))
plot(GTrade, layout=l, vertex.size=V(GTrade)$size, vertex.label=V(GTrade)$names, vertex.frame.color=NA, vertex.label.cex=0.80)
dev.off()
#l <- layout.graphopt(GCoau.dense)
png("result/Coau.png", height=1500,width=1500, res=144)
l <- qgraph.layout.fruchtermanreingold(get.edgelist(GCoau.dense),vcount=vcount(GCoau.dense))
plot(GCoau.dense, layout=l, vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
dev.off()
# Node size corresponding to the degree
V(GCoau.dense)$size <- 0.5*sqrt(degree(GCoau.dense))
plot(GCoau.dense, layout=l, vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
# Node size corresponding to the degree
V(GCoau.dense)$size <- sqrt(degree(GCoau.dense))
plot(GCoau.dense, layout=l, vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
# Node size corresponding to the degree
V(GCoau.dense)$size <- 1.5*sqrt(degree(GCoau.dense))
plot(GCoau.dense, layout=l, vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
table(sapply(comps,vcount))
# induced a connected subgraph
comps <- decompose.graph(GCoau.3core)
table(sapply(comps,vcount))
vcount(GCoau.3core)
GCoau.dense <- decompose.graph(comps)[[1]]
GCoau.dense <- comps[[1]]
GCoau.dense
subCoauAdj <- get.adjacency(GCoau.dense)
K.max <- 10
Coau.Para.hat <- Est.DCSBM(subCoauAdj,K.max)
Coau.Para.hat$P.hat <- as.matrix(Coau.Para.hat$P.hat)
save(Coau.Para.hat,file="result/Coau.Para.hat.Rda")
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==1)]$color = 'green'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==2)]$color = 'cyan'
V(GCoau.dense)[unlist(Coau.Para.hat$e.hat==3)]$color = 'salmon'
V(GCoau.dense)$size <- 1.5*sqrt(degree(GCoau.dense))
vertex.label <- V(GCoau.dense)$names
vertex.label[degree(GCoau.dense)<=10] <- ""
l <- qgraph.layout.fruchtermanreingold(get.edgelist(GCoau.dense),vcount=vcount(GCoau.dense))
plot(GCoau.dense, layout=l, vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
png("result/Coau.png", height=1500,width=1500, res=144)
l <- qgraph.layout.fruchtermanreingold(get.edgelist(GCoau.dense),vcount=vcount(GCoau.dense))
plot(GCoau.dense, layout=l, vertex.size=V(GCoau.dense)$size, vertex.label=vertex.label, vertex.frame.color=NA, vertex.label.cex=0.80)
dev.off()
c1.names <- vertex.label[unlist(Coau.Para.hat$e.hat==1)]
c1.names[c1.names!='']
c2.names <- vertex.label[unlist(Coau.Para.hat$e.hat==2)]
c2.names[c2.names!='']
c3.names <- vertex.label[unlist(Coau.Para.hat$e.hat==3)]
c3.names[c3.names!='']
